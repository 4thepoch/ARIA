#!/usr/bin/env python
# -*- coding: utf-8 -*-

import ARIAdbcon
import ARIApySpark
import tensorSaver
import ARIAnalysis
#from pyspark import SparkConf, SparkContext
from pyspark.sql import SQLContext
from pyspark.sql.types import StructType, StructField, StringType, IntegerType, FloatType, TimestampType

# SparkStreaming & TensorFlow & MariaDbController 의 중간 역할 
class tensorController:
	def __init__(self, dbargs, pyspark):
		self.dbcon      = ARIAdbcon.mariaDB(dbargs[0],dbargs[1],dbargs[2],dbargs[3],dbargs[4])
		self.pyspark    = pyspark
		self.sqlContext = SQLContext(self.pyspark.getSparkContext())
		self.tf		= tensorSaver.tensorExample()
		self.date       = ARIApySpark.ARIAdate()
		self.analysis   = ARIAnalysis.ARIAnalysis(pyspark)
 
	def setTC(self, command, subcommand, data):

		if(command == "feedData"):
			self.feedData(subcommand, data)

		elif(command == "setModel"):
			self.setModel(subcommand, data)

	def realTimeData(self, data):
		dataLine = data.split("/")
                dataList = []
                for d in dataLine:
                	dataList.append(d.split(","))

                dataDF = self.sqlContext.createDataFrame(dataList[:-1],["TAG_ID","TYPE","YEAR","MONTH","DAY","HOUR","MINUTE","VALUE","WRITEDATE"])
		return dataDF

	def feedData(self, subcommand, data):
		print(subcommand)
		#DB Insert 여부
                if('db' in subcommand):
                        dbuse = True
                else:
                        dbuse = False


		# sub명령어 확인
		# 1분 단위 데이터 일 경우,
		if('now_esPower' in subcommand):
			dataDF = self.realTimeData(data)

			dataDF.createOrReplaceTempView("RTU")
			now = self.date.getToday('%Y%m%d%H%M')

			selectStr  = " TAG_ID, TYPE, "
			selectStr += now[0:4] + " AS YEAR, "
			selectStr += now[4:6] + " AS MONTH, "
			selectStr += now[6:8] + " AS DAY, "
			selectStr += now[8:10]+ " AS HOUR, "
			selectStr += now[10:12]+ " AS MINUTE, "
			selectStr += " cast(VALUE as FLOAT) AS VALUE, WRITEDATE "
	
			df = self.sqlContext.sql(" SELECT " + selectStr + "FROM RTU")
			df = df.groupBy('YEAR','MONTH','DAY','HOUR','MINUTE').pivot('TAG_ID').sum('VALUE').sort('YEAR','MONTH','DAY','HOUR','MINUTE')
			df.show()
			#dbuse = True
		if('day_esPower' in subcommand):
			start = data.split(",")[0]
			end   = data.split(",")[1]
			df = self.initData(start,end,flag = 0)
		
		# analysis Data series 초기화  0 : setModel . 1 : feedData
		self.analysis.setData_series(1)

		# 인버터 컬럼 세팅
		invCols = []
                invCols.append([1,3,8,9,10,2])
                invCols.append([5,7,8,9,10,6])

		# 태그 아이디 초기화	
		tagIds = []
		tagIds.append(['IPA_SOL005_INV01_PP_NLR_001','IPA_SOL005_INV01_PP_ANN_001'])
		tagIds.append(['IPA_SOL005_INV02_PP_NLR_001','IPA_SOL005_INV02_PP_ANN_001'])
		
		# 결과 리스트	
		resultList = []

                for i in invCols:
			resultList.append(self.analysis.analyzeData(self.analysis.preProcData(df.toPandas().dropna(axis=0), i)))
		
		# 실제 데이터 날짜 세팅
		date = df.toPandas().dropna(axis=0)
		date = date[['YEAR','MONTH','DAY','HOUR','MINUTE']]
		invCnt = 0

		# 결과 리스트 반복 
		for result in resultList:
			#행 인댁스 초기화
			row = 0
			# tag id 세팅
			tags = tagIds[invCnt]
			valueSum = 0
			print("################# lr ##############")
			for lr in result['lr']:
				
				indate = date.iloc[[row]].values.tolist()[0]
				writedate = '{}-{:0>2}-{:0>2} {:0>2}:{:0>2}:00'.format(indate[0], indate[1], indate[2], indate[3], indate[4])
				
				data = lr[0]
				if(lr[0] < 0):
					data = 0.0
					
				print(tags[0])
				print(indate)
				valueSum = valueSum + data

				if(dbuse):
					queryStr  = "INSERT INTO msmt_realtime(tag_id, year, month, day, hour, minute, value, writedate) VALUES("
					queryStr += "'{}', '{}', '{:0>2}', '{:0>2}', '{:0>2}', '{:0>2}', '{}', '{}')".format(tags[0], indate[0], indate[1], indate[2], indate[3], indate[4], data, writedate)
					print(queryStr)
					self.dbcon.query(queryStr)
					if(indate[4] % 10 == 0):
						queryStr  = "INSERT INTO msmt_data(tag_id, year, month, day, hour, minute, value, writedate) VALUES("
                                        	queryStr += "'{}', '{}', '{:0>2}', '{:0>2}', '{:0>2}', '{:0>2}', '{}', '{}')".format(tags[0], indate[0], indate[1], indate[2], indate[3], indate[4], valueSum, writedate)
                                        	print(queryStr)
                                        	self.dbcon.query(queryStr)
						valueSum = 0
				row = row + 1

			#행 인덱스 초기화
			row = 0
			print("################# nn ##############")
			for nns in result['nn']:
				for nn in nns:
					indate = date.iloc[[row]].values.tolist()[0]
					writedate = '{}-{:0>2}-{:0>2} {:0>2}:{:0>2}:00'.format(indate[0], indate[1], indate[2], indate[3], indate[4])

					data = nn
					if(nn < 0):
						data = 0.0
					valueSum = valueSum + data 
					print(date.iloc[[row]].values.tolist())
					print(tags[1])
					if(dbuse):
                                        	queryStr  = "INSERT INTO msmt_realtime(tag_id, year, month, day, hour, minute, value, writedate) VALUES("
                                        	queryStr += "'{}', '{}', '{:0>2}', '{:0>2}', '{:0>2}', '{:0>2}', '{}', '{}')".format(tags[1], indate[0], indate[1], indate[2], indate[3], indate[4], data, writedate)
                                        	print(queryStr)
                                        	self.dbcon.query(queryStr)
                                		if(indate[4] % 10 == 0):
                                        		queryStr  = "INSERT INTO msmt_data(tag_id, year, month, day, hour, minute, value, writedate) VALUES("
                                        		queryStr += "'{}', '{}', '{:0>2}', '{:0>2}', '{:0>2}', '{:0>2}', '{}', '{}')".format(tags[1], indate[0], indate[1], indate[2], indate[3], indate[4], valueSum, writedate)
                                        		print(queryStr)
                                        		self.dbcon.query(queryStr)
                                        		valueSum = 0
	
					row = row + 1 
			invCnt = invCnt + 1

	def setModel(self, subcommand, data):
		startDate = subcommand.split(",")[0]
		endDate   = subcommand.split(",")[1]
		df = self.initData(startDate, endDate, flag = 0)

		invCols = []
                invCols.append([1,3,8,9,10,2])
                invCols.append([5,7,8,9,10,6])
	
		self.analysis.setData_series(0)
		
		resultList = []
		for i in invCols:
			w = self.analysis.analyzeData(self.analysis.preProcData(df.toPandas().dropna(axis=0), i))
			resultList.append(w.tolist())
		
		columnList = ["dc_i", "dc_v", "outertemp", "innertemp", "solar"]
		valueList = [0,0,0,0,0]
	
		columnCnt = 0
		for result in resultList:
			columnCnt = 0
			for i in result:
				print(i)
				valueList[columnCnt] +=  abs(i[0]) * 10
				columnCnt = columnCnt +1


		columnCnt = 0
		for i in columnList:
			date = endDate
			value = valueList[columnCnt] / 2
			name  = i
			queryStr  = "INSERT INTO influence_factor(name, year, month, day, station_idx, value) VALUES("
			queryStr += "'{}','{}','{}','{}','{}','{}')".format(name, date[0:4], date[4:6], date[6:8], 6, value)
			self.dbcon.query(queryStr)
			print(queryStr)
			columnCnt += 1
			
		#self.tf.setModel_esPower(df.toPandas().dropna(axis=0), '/home/hadoop/javaModule/pythonModule/model/'+self.date.getToday('%Y%m%d')+'/')
		#print("setModel Command  :  " + subcommand)


	def initData(self, start, end, flag):
		self.pyspark.initData(start, end, flag = flag)
		df = self.pyspark.selectData(selectStr = '*')
		df = df.groupBy('YEAR','MONTH','DAY','HOUR','MINUTE').pivot('TAG_ID').sum('VALUE').sort('YEAR','MONTH','DAY','HOUR','MINUTE')
		return df
